// Code generated by hertz generator.

package category

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/golang-jwt/jwt/v4"
	"net/http"
	"strconv"
)

func rootMw() []app.HandlerFunc {
	return []app.HandlerFunc{func(ctx context.Context, c *app.RequestContext) {
		tokenString := string(c.GetHeader("Authorization"))
		if tokenString == "" {
			c.JSON(http.StatusUnauthorized, map[string]string{"error": "Authorization token required"})
			c.Abort()
			return
		}

		token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
			if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
				return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
			}
			return []byte("Lin123456789987654321"), nil
		})

		if err != nil {
			c.JSON(http.StatusUnauthorized, map[string]string{"error": "Invalid token"})
			c.Abort()
			return
		}

		if claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {
			c.Set("identity", AnyToString(claims["identity"]))
			fmt.Println("identity", claims["identity"])
			c.Next(ctx)
		} else {
			c.JSON(http.StatusUnauthorized, map[string]string{"error": "Invalid token"})
			c.Abort()
		}
	},
	}
}
func AnyToString(value interface{}) string {
	// 定义一个变量来存储最终的字符串
	var strValue string

	// 根据 value 的实际类型进行转换
	switch v := value.(type) {
	case string:
		// 如果 value 已经是 string 类型
		strValue = v
	case int:
		// 如果 value 是 int 类型
		strValue = strconv.Itoa(v)
	case float64:
		// 如果 value 是 float64 类型
		strValue = strconv.FormatFloat(v, 'f', -1, 64)
	case bool:
		// 如果 value 是 bool 类型
		strValue = strconv.FormatBool(v)
	default:
		// 如果 value 是其他类型
		strValue = fmt.Sprintf("%v", v)
	}

	return strValue
}

func _addcartitemMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _getcartMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _categoryMw() []app.HandlerFunc {
	// your code...
	return nil
}
